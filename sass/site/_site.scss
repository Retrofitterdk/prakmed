/*==============================================================
3.0 Basic Structure
==============================================================*/
.wrap {
  clear: both;
  margin: 0 auto;
  width: 100%;
  max-width: $container-width;
  padding: 0 1rem;
  position: relative;
  @media screen and (min-width: $tablet) {
    padding: 0 2rem;
  }
  @media screen and (min-width: $desktop) {
    padding: 0 4rem;
  }
}
@media screen and (min-width: $desktop) {
  #primary {
    float: right;
    margin: 0;
    padding: 0;
  }

  #secondary {
    float: left;
    margin: 0;
    padding: 0;
  }
}

/*--------------------------------------------------------------
## Header navigation
--------------------------------------------------------------*/
header.site-header {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 10;
  width: 100%;
  // line-height: 4rem;
  background: #00a44e;
  clear: both;
  box-sizing: border-box;
  @media screen and (min-width: $desktop) {
    position: relative;;
    top: auto;
    left: auto;
  }
  & .site-branding {
    display: inline-block;
    float: left;
    & .site-title {
      font-size: 2.1rem;
      line-height: 4rem;
      margin: 0;
      @media screen and (min-width: $phablet) {
        font-size: 2.6rem;
      }
      @media screen and (min-width: $desktop) {
        font-size: 3rem;
        line-height: 6rem;
      }
      & a {
        color: #fff;
        text-decoration: none;
      }
    }
  }
}

#sidebar-top {
  margin-top: 5rem;
  @media screen and (min-width: $desktop) {
    margin-top: 1rem;
  }
}

.site-content {
  margin-top: 3rem;
  margin-bottom: 3rem;
}

.pagination {
  display: block;
  a {
    display: inline-block;
    padding: 1rem 0;
    color: #909090;
    text-decoration: none;
    &:hover {
      color: #00a44e;
    }
    &[rel="prev"] {
      float: left;
    }
    &[rel="next"] {
      float: right;
    }
  }
}

// Footer
#footer-info {
  padding-top: 2rem;
  padding-bottom: 2rem;
  margin-bottom: 3rem;
  @media screen and (min-width: $desktop) {
    color: $color__text-white;
    margin-bottom: 0;
  }
  & div {
    & h3 {
      font-size: 2rem;
      margin: 0;
      &.privacy-policy-link,
      &.cookie-policy-link {
        margin-bottom: 1rem;
        a {
          color: $color__text-white;
        }
      }
    }
    & p {
      margin-top: 0;
      margin-bottom: 1rem;
      font-size: 1.4rem;
      & a {
        color: $color__text-white;
        text-decoration: none;
      }
      & span {
        display: block;
      }
      & span#postal_locality,
      & span#postal_code {
        display: inline;
      }
    }
  }
  #book {
    width: 20rem;
    margin-bottom: 3rem;
    & img {
    }
  }
}



/*==============================================================
Larger than tablet
==============================================================*/
/*==============================================================
numToString is borrowed
from https://github.com/atomicpages/skeleton-sass/blob/master/skeleton/core/_dependencies.scss
==============================================================*/
@function numToString($int) {
  // set up lists
  $ones: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine";
  $teens: "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen";
  $tens: "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety";

  $int: abs($int); // no nonnegative numbers
  $number: "";
  $temp: $int / 10;
  $temp: floor($temp);
  @if($int >= 1 and $int <= 100) {
    @if($temp < 1) { // it's a one!
      $number: nth($ones, $int % 10);
    }
    @if($temp == 1) { // in the teen range
      @if($int % 10 == 0) {
        $number: "ten";
      } @else {
        $number: nth($teens, $int % 10);
      }
    }
    @if($temp >= 2 and $temp <= 9) { // more than our teens
      @if($int % 10 == 0) {
        // means it's a number evenly divisible by 10
        $number: nth($tens, $int / 10);
      } @else {
        $number: "#{nth($tens, floor($int / 10))}-#{nth($ones, $int % 10)}";
      }
    }
    @if($temp == 10) { // this is the end...
      $number: "one-hundred";
    }
  } @else {
    $number: "Invalid parameter passed. Number must be between 1 and 100."
  }
  @return $number;
}

@media (min-width: 960px) {
  /*==============================================================
  Normalize grid
  ==============================================================*/
  .column,
  .columns {
    margin-left: $columnMargin;
    box-sizing: border-box;
    float: left;
  }
  .column:first-child,
  .columns:first-child,
  #content-column {
    margin-left: 0;
  }
  /*==============================================================
  Grid
  ==============================================================*/
  @for $i from 1 through $columnAmount {
    $column-width: ($single-column-width*$i)+($columnMargin*($i - 1));
    @if ($i == 1) {
      .#{numToString($i)}.column {
        width: $column-width;
      }
    } @else if ($i == $columnAmount) {
      .#{numToString($i)}.column,
      .#{numToString($i)}.columns {
        width: $column-width;
        margin-left: 0;
      }
    } @else {
      .#{numToString($i)}.column,
      .#{numToString($i)}.columns {
        width: $column-width;
      }
    }
  }
  .one-third.column {
    width: (98% * (1 / 3)) - 2;
  }
  .two-third.column,
  .two-third.columns {
    width: (98% * (2 / 3));
  }
  .one-half.column,
  .one-half.columns {
    width: (98% * (1 / 2)) - 1;
    margin-left: 0;
    margin-right: 0;
  }
  /*==============================================================
  Offsets
  ==============================================================*/
  @for $i from 1 through $columnAmount {
    @if ($i == 1) {
      .offset-by-#{numToString($i)} {
        margin-left: ((100% - ($columnAmount / $i - 1) * $columnMargin) / $columnAmount * $i) + $columnMargin;
      }
    } @else if ($i == $columnAmount) {
      // do not apply .offset-by-twelve
    } @else {
      .offset-by-#{numToString($i)}.column,
      .offset-by-#{numToString($i)}.columns {
        margin-left: ((100% - ($columnAmount / $i - 1) * $columnMargin) / $columnAmount * $i) + $columnMargin;
      }
    }
  }
  .offset-by-one-third.column,
  .offset-by-one-third.columns {
    margin-left: (98% * (1 / 3)) + 2;
  }
  .offset-by-two-thirds.column,
  .offset-by-two-third.columns {
    margin-left: (98% * (2 / 3)) + 4;
  }
  .offset-by-one-half.column,
  .offset-by-one-half.columns {
    margin-left: 98% * (1 / 2) + $columnMargin - 1;
  }
}
